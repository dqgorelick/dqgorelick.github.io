I"À<h3 id="literally-everything-is-a-vector">Literally everything is a Vector</h3>

<p>Lecture at SFPC by Patricio Gonzalez Vivo, author of <a href="https://thebookofshaders.com/" target="_blank">The Book of Shaders</a>.</p>

<p>The main example we are looking at from <a href="http://editor.thebookofshaders.com/" target="_blank">here</a>.</p>

<p class="center medium"><img src="http://localhost:4000/images/blog/shaders_example.png" alt="shader gradient" /></p>

<p>The code for this is here:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

void main() {
    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    st.x *= u_resolution.x/u_resolution.y;

    st += vec2(.0);
    vec3 color = vec3(1.);
    color = vec3(st.x,st.y,0.0);

    gl_FragColor = vec4(color,1.0);
}
</code></pre></div></div>

<p>The main input here is gl_FragCoord, it is a vec3 that has the value of each pixel (0 to width-1)</p>

<p>The main output is <code class="language-plaintext highlighter-rouge">gl_FragColor</code>, a vec4 which has RED, BLUE, GREEN, and ALPHA.</p>

<p>We are creating a vec2 using the gl_FragCoord.xy. We normalize it with this:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vec2 st = gl_FragCoord.xy/u_resolution.xy;
</code></pre></div></div>

<p>We then create a gradient with the RED, and GREEN values by doing so:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>color = vec3(st.x,st.y,0.0);
</code></pre></div></div>

<p>The last value of the BLUE is set to 0.0, and the ALPHA is set to be 1.0.</p>

<h3 id="working-with-sine--cosine">Working with sine / cosine</h3>

<p>To produce some very ‚Äúorganic‚Äù results, we can start using sin and cosine.</p>

<p class="center medium"><img src="http://localhost:4000/images/blog/shaders_first_try.png" alt="Sine Cosine Experiement" /></p>

<p class="media-caption">Playing around with sin and cosine</p>

<p>The code for the piece above:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
#ifdef GL_ES
precision mediump float;
#endif

#define PI 3.14159

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;
float line(float x, float c, float w) {
    return step(c,x)-step(c+w,x);
}

void main() {
    vec2 pos = gl_FragCoord.xy/u_resolution;

    vec3 color = vec3(0.);
    color += abs(sin(PI/-pos.y*PI));
    color.b += abs(cos(PI/-sin(u_time)*PI));

    color.r += abs(sin(pos.x));
    color.g -= 0.4;

    color -= 0.5;

    gl_FragColor.rgb = color;
    gl_FragColor.a = 1.0;
}
</code></pre></div></div>

<p>The key piece of code which creates the effect is <code class="language-plaintext highlighter-rouge">sin(PI/-pos.y*PI)</code>.</p>

<h3 id="main-takeaway">Main takeaway</h3>

<p>GLSL is definitely not very intuitive. In fact, I would say it is the least‚Äìintuitive programming I‚Äôve done in a while. Nonetheless, I feel motivated to start messing around with the language more. Shaders seem to be pretty cool after all.</p>

<p><em>fin</em></p>
:ET