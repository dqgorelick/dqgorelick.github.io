I"X<h3 id="deploying-to-the--cloud-">Deploying to the ~~ Cloud ~~</h3>

<p>Recently for the SFPC Showcase, I created the <a href="http://danielgorelick.com/#venmobots" target="_blank">Venmo Strips</a> Comic Creator. For the installation it was suitable to run the web application locally, but now I want to deploy it. It is almost a static web app, except we need to make a server-side call to the public Venmo API to refresh the data.</p>

<p class="center large"><img src="http://localhost:4000/images/blog/deployed.png" alt="cost estimates from the first week" /></p>

<p class="media-caption">Strip edited from <a href="http://venmostrips.com" target="blank">http://venmostrips.com</a></p>

<h3 id="aws-central">AWS Central</h3>

<p>One solution is to create an EC2 instance to host my webapp in its entirety. However running an instance (for even a computationally trivial app) can cost a bit – well, more than I want to spend. I decided to look into making it serverless to save costs, and learn some new AWS tools.</p>

<p>The plan is to:</p>

<ul>
  <li>
    <p>host all of the static files in a AWS S3 bucket</p>
  </li>
  <li>
    <p>create a AWS Lambda function to perform the server side jobs</p>
  </li>
  <li>
    <p>set up a cron job using AWS CloudWatch to run the Lambda function</p>
  </li>
</ul>

<h3 id="s3-bucketing--route-53">S3 Bucketing &amp; Route 53</h3>

<p>I’ve used S3 before, but this time I have to make sure to connect my Google Domain to the bucket. There are plenty of docs, and I was able to follow <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html" target="_blank">this one</a> to do that.</p>

<h3 id="setting-up-the-lambda-function">Setting up the Lambda function</h3>

<p>Since I already created a standalone web application, I was able to use the code from my <a href="https://github.com/dqgorelick/venmo-bots/blob/master/server.js" target="_blank">Node server</a> to create the lambda function. The one challenge was figuring out how to connect the Lambda function to the S3 bucket. I made sure to create the Lambda function in the same region as the bucket and crossed my fingers.</p>

<p>The crux of the Lambda function is here:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exports.handler = (event, context, callback) =&gt; {
  request(`https://venmo.com/api/v5/public?limit=${LIMIT}`, function(error, response, body) {
    if (!error &amp;&amp; response.statusCode == 200) {
      filterPayments(body, (filtered) =&gt; {
        var param = { Bucket: 'venmostrips.com', Key: 'feed.json', Body: filtered};
        s3.upload(param, function(err, data) {
          if (err) {
            console.log(err, err.stack);
          }
          context.done();
        });
      });
    }
  })
};
</code></pre></div></div>

<h3 id="connecting-it-all-together">Connecting it all together</h3>
<p>The moment of truth came when testing the Lambda function. I used the AWS web tool to “Test” the function, and upon checking the S3 bucket– the data was sent!</p>

<p>There was however, one hiccup. The file being sent <code class="highlighter-rouge">feed.json</code> was not being read properly from the client side. The GET request kept returning a 403 error. After a bit of time on Google / Stackoverflow I found that this was due to the lack of a bucket policy for <code class="highlighter-rouge">"Action": "s3:GetObject"</code>. After adding the policy, things worked!</p>

<h3 id="cron-jobing">Cron Jobing</h3>
<p>Probably the most straight-forward part. Last but not least was setting up the cron job to continually update the data. After a google search I found the CloudWatch did exactly that. I was able to connect the Lambda function to the CloudWatch job, and have it run every 5 minutes.</p>

<p>Boom boom, all done.</p>

<h3 id="from--to-">From $$$ to $</h3>
<p>Instead of setting up an EC2 instance I was able to deploy my web app for very little.</p>

<p class="center medium"><img src="http://localhost:4000/images/blog/aws_costs.png" alt="cost estimates from the first week" /></p>

<p class="media-caption">Breakdown of costs on AWS</p>

<p>As long as my S3 doesn’t blow up, I should be alright with everything but S3-PUTs. Seems as though we won’t get away completely chalk free, but I’d say not bad.</p>

<p>All and all, not bad for a bootstrap solution!</p>

<p><em>fin</em></p>
:ET